rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Subjects collection
    match /subjects/{subjectId} {
      allow read;
      allow write: if isAdmin();
    }
    
    // Resources collection
    match /resources/{resourceId} {
      allow read;
      allow create: if isSignedIn();
      allow update: if isAdmin() || (isSignedIn() && resource.data.createdBy == request.auth.token.email);
      allow delete: if isAdmin() || (isSignedIn() && resource.data.createdBy == request.auth.token.email);
    }
    
    // Comments collection
    match /comments/{commentId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.createdBy == request.auth.token.email);
    }
    
    // Chat messages
    match /chats/{chatId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && 
        ((resource.data.sender == request.auth.token.email) || isAdmin());
    }
    
    // Chat rooms
    match /chatRooms/{roomId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && 
        (resource.data.createdBy == request.auth.token.email || 
         isAdmin() || 
         request.auth.token.email in resource.data.participants);
      allow delete: if isSigne  || 
         request.auth.token.email in resource.data.participants);
      allow delete: if isSignedIn() && 
        (resource.data.createdBy == request.auth.token.email || isAdmin());
    }
    
    // Projects collection
    match /projects/{projectId} {
      allow read; // Allow anyone to read projects
      allow create: if isSignedIn(); // Only signed-in users can create
      allow update: if isSignedIn() && 
        (request.auth.uid == resource.data.createdBy || isAdmin());
      allow delete: if isSignedIn() && 
        (request.auth.uid == resource.data.createdBy || isAdmin());
    }
    
    // Study sessions collection
    match /studySessions/{sessionId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.token.email;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.token.email;
      allow update: if isSignedIn() && resource.data.userId == request.auth.token.email;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.token.email;
    }
    
    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.token.email;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.token.email;
      allow update: if isSignedIn() && resource.data.userId == request.auth.token.email;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.token.email;
    }
    
    // Water tracking collection
    match /waterTracking/{userId} {
      allow read: if isSignedIn() && userId == request.auth.token.email;
      allow create: if isSignedIn() && userId == request.auth.token.email;
      allow update: if isSignedIn() && userId == request.auth.token.email;
      allow delete: if isSignedIn() && userId == request.auth.token.email;
    }
  }
}
