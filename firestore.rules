rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth.token.email == 'admin@iitm.ac.in';
    }
    
    function isValidResource() {
      let requiredFields = ['title', 'description', 'type', 'createdBy', 'subjectId'];
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidComment() {
      let requiredFields = ['content', 'createdBy', 'resourceId'];
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidProject() {
      let requiredFields = ['title', 'description', 'createdBy'];
      return request.resource.data.keys().hasAll(requiredFields);
    }
    
    function isValidBookmark() {
      let requiredFields = ['userId', 'resourceId', 'resourceType'];
      return request.resource.data.keys().hasAll(requiredFields) &&
             request.resource.data.userId == request.auth.uid;
    }
    
    // Public read access for subjects
    match /subjects/{subjectId} {
      allow read: if true;
      allow write: if isSignedIn() && isAdmin();
    }
    
    // Resources can be read by anyone, created by signed-in users, and modified by owners or admins
    match /resources/{resourceId} {
      allow read: if true;
      allow create: if isSignedIn() && isValidResource();
      allow update: if isSignedIn() && (isOwner(resource.data.createdBy) || isAdmin());
      allow delete: if isSignedIn() && (isOwner(resource.data.createdBy) || isAdmin());
    }
    
    // Comments can be read by anyone, created by signed-in users, and modified by owners or admins
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn() && isValidComment();
      allow update, delete: if isSignedIn() && (isOwner(resource.data.createdBy) || isAdmin());
    }
    
    // User profiles can be read by anyone, but only modified by the owner or admin
    match /users/{userId} {
      allow read: if true;
      allow write: if isSignedIn() && (isOwner(userId) || isAdmin());
    }
    
    // Bookmarks are private to the user who created them
    match /bookmarks/{bookmarkId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && isValidBookmark();
      allow update, delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Study sessions are private to the user who created them
    match /studySessions/{sessionId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.userId);
    }
    
    // Projects can be read by anyone, created by signed-in users, and modified by owners or admins
    match /projects/{projectId} {
      allow read: if true;
      allow create: if isSignedIn() && isValidProject();
      allow update, delete: if isSignedIn() && (isOwner(resource.data.createdBy) || isAdmin());
      
      // Project comments
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isSignedIn();
        allow update, delete: if isSignedIn() && (isOwner(resource.data.createdBy) || isAdmin());
      }
    }
    
    // Notifications are private to the user they're intended for
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && isOwner(resource.data.userId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Leaderboard data - read-only for users, write access for admins
    match /leaderboard/{userId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn() && isAdmin();
    }
    
    // Admin-only collections
    match /adminSettings/{settingId} {
      allow read, write: if isSignedIn() && isAdmin();
    }
    
    match /reports/{reportId} {
      allow read, write: if isSignedIn() && isAdmin();
      allow create: if isSignedIn(); // Users can create reports
    }
    
    // Analytics data - admin only
    match /analytics/{docId} {
      allow read, write: if isSignedIn() && isAdmin();
    }
  }
}
