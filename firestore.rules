rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // User profiles
    match /users/{userId} {
      allow read;
      allow create, update, delete: if isAdmin() || request.auth.uid == userId;
    }
    
    // Subjects - publicly readable
    match /subjects/{subjectId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }
    
    // Resources - publicly readable
    match /resources/{resourceId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.createdBy == request.auth.token.email);
    }
    
    // Comments - require login
    match /comments/{commentId} {
      allow read;
      allow create: if isSignedIn();
      allow update, delete: if isAdmin() || (isSignedIn() && resource.data.createdBy == request.auth.token.email);
    }
    
    // Chats - require login
    match /chats/{chatId} {
      allow read: if isSignedIn() && (
        // General and subject chats are readable by all signed-in users
        (resource.data.chatRoomId == null) || 
        // Private chats are only readable by participants
        (resource.data.chatRoomId != null && 
         exists(/databases/$(database)/documents/chatRooms/$(resource.data.chatRoomId)) && 
         request.auth.token.email in get(/databases/$(database)/documents/chatRooms/$(resource.data.chatRoomId)).data.participants)
      );
      
      allow create: if isSignedIn() && (
        // Anyone can create general or subject chat messages
        (request.resource.data.chatRoomId == null && request.resource.data.sender == request.auth.token.email) ||
        // For private chats, user must be a participant
        (request.resource.data.chatRoomId != null && 
         exists(/databases/$(database)/documents/chatRooms/$(request.resource.data.chatRoomId)) && 
         request.auth.token.email in get(/databases/$(database)/documents/chatRooms/$(request.resource.data.chatRoomId)).data.participants &&
         request.resource.data.sender == request.auth.token.email)
      );
      
      allow update, delete: if isSignedIn() && (
        isAdmin() || resource.data.sender == request.auth.token.email
      );
    }
    
    // Chat Rooms - require login
    match /chatRooms/{roomId} {
      // Allow any signed-in user to read chat room data
      allow read: if isSignedIn();
      
      // Allow any signed-in user to create a chat room
      allow create: if isSignedIn() && (
        request.resource.data.createdBy == request.auth.token.email &&
        request.auth.token.email in request.resource.data.participants
      );
      
      // Critical fix: Allow updating participants array for joining rooms
      allow update: if isSignedIn() && (
        // Allow creator or admin to update
        resource.data.createdBy == request.auth.token.email || 
        isAdmin() ||
        // Allow joining (adding self to participants)
        (request.resource.data.participants.hasAll(resource.data.participants) && 
         resource.data.participants.size() < request.resource.data.participants.size() &&
         request.resource.data.createdBy == resource.data.createdBy &&
         request.resource.data.name == resource.data.name)
      );
      
      allow delete: if isSignedIn() && (
        isAdmin() || resource.data.createdBy == request.auth.token.email
      );
    }
    
    // Study sessions - publicly readable, but require login to create/modify
    match /studySessions/{sessionId} {
      allow read;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.token.email;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.token.email;
    }
    
    // Water tracking - require login
    match /waterTracking/{userId} {
      allow read: if isSignedIn() && userId == request.auth.token.email;
      allow create, update: if isSignedIn() && userId == request.auth.token.email;
    }
    
    // Tasks - require login
    match /tasks/{taskId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.token.email;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.token.email;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.token.email;
    }
    
    // Notifications - allow read/write for the recipient
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && resource.data.recipientEmail == request.auth.token.email;
      allow create: if isSignedIn() && (isAdmin() || request.resource.data.senderEmail == request.auth.token.email);
      allow update: if isSignedIn() && resource.data.recipientEmail == request.auth.token.email;
      allow delete: if isSignedIn() && (isAdmin() || resource.data.recipientEmail == request.auth.token.email);
    }
    
    // Other collections
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
