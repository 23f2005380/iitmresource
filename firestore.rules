rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isResourceOwner(resourceId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/resources/$(resourceId)) &&
        get(/databases/$(database)/documents/resources/$(resourceId)).data.createdBy == request.auth.uid;
    }
    
    function isChatRoomMember(roomId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/chatRooms/$(roomId)) &&
        request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.members;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isOwner(userId) || isAdmin();
    }
    
    // Subjects collection - public read, admin write
    match /subjects/{subjectId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Resources collection - public read, authenticated write
    match /resources/{resourceId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isResourceOwner(resourceId) || isAdmin();
    }
    
    // Comments collection - public read, authenticated write
    match /comments/{commentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if request.auth.uid == resource.data.createdBy || isAdmin();
    }
    
    // Notifications collection - owner read/write, admin write
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && (request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId || isAdmin());
      allow delete: if isAdmin();
    }
    
    // Study sessions collection - owner read/write
    match /studySessions/{sessionId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    // Chat rooms collection
    match /chatRooms/{roomId} {
      // Anyone can read chat rooms
      allow read: if true;
      
      // Anyone can create a chat room
      allow create: if isSignedIn();
      
      // Members can update chat rooms (for joining)
      allow update: if isSignedIn() && (
        // Allow updates if user is already a member
        (isChatRoomMember(roomId)) ||
        // Allow updates if user is joining (only adding themselves to members)
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
         request.resource.data.members.hasOnly(resource.data.members.concat([request.auth.uid])))
      );
      
      // Only admin or creator can delete
      allow delete: if isSignedIn() && (
        request.auth.uid == resource.data.createdBy || isAdmin()
      );
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read: if true;
        allow create: if isSignedIn() && (
          // User must be a member to create messages
          request.auth.uid in get(/databases/$(database)/documents/chatRooms/$(roomId)).data.members &&
          // Message must be from the authenticated user
          request.resource.data.userId == request.auth.uid
        );
        allow update, delete: if isSignedIn() && (
          request.auth.uid == resource.data.userId || isAdmin()
        );
      }
    }
  }
}
